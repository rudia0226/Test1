
SELECT * FROM EXAM_RSLT;

-- 전체가 하나로 순위매겨짐
SELECT RANK() OVER(ORDER BY MAT DESC), A.*
FROM EXAM_RSLT A;

-- 반별로 순위매김
SELECT RANK() OVER(PARTITION BY CLASS ORDER BY MAT DESC), A.*
FROM EXAM_RSLT A;

SELECT DENSE_RANK() OVER(ORDER BY MAT DESC), A.*
FROM EXAM_RSLT A;

-- 정렬하면서 이전값들의 합과 더해줌
-- 러닝서머리 ; 누적합
SELECT RANK() OVER(ORDER BY MAT DESC), SUM(ENG) OVER(ORDER BY ENG, NAME), A.*
FROM EXAM_RSLT A;

-- 분석함수 LAG
SELECT A.*,  KOR+ENG+MAT TOT
		,MAT- LAG(MAT) OVER(ORDER BY KOR+ENG+MAT DESC) TST
FROM EXAM_RSLT A;



-- 61페이지 ; 분석함수를 사용한 앞/뒤 데이터 차이 계산
SELECT NAME
	, DENSE_RANK() OVER(ORDER BY KOR+ENG+MAT DESC) D_RK
	, CLASS
	, KOR
	, ENG
	, MAT
	, KOR+ENG+MAT TOT
	, KOR+ENG+MAT - LAG(KOR+ENG+MAT) OVER(ORDER BY KOR+ENG+MAT DESC) AS LAG_CHA
FROM EXAM_RSLT
;

-- LEG ; 이전 로우의 값 반환
-- LEAD ; 이후 로우의 값 반환


-- 62P 분석함수를 사용한 앞/뒤 데이터 차이 계산 (확장)ㄴ
SELECT NAME
	, CLASS
	, KOR
	, ENG
	, MAT
	, TOT
	, RANK() OVER(ORDER BY TOT DESC) RK
	, DENSE_RANK() OVER(ORDER BY TOT DESC) D_RK
	, SUM(TOT) OVER(ORDER BY TOT DESC) RUM_RK
	, SUM(TOT) OVER(PARTITION BY CLASS ORDER BY TOT, CLASS) SUM_PT_RK
	, RANK() OVER(PARTITION BY CLASS ORDER BY TOT) AS PT_RK
	, TOT - LAG(TOT) OVER(ORDER BY TOT DESC) AS LAG_CHA
	, TOT - LEAD(TOT) OVER(ORDER BY TOT DESC) AS LEAD_CHA
FROM 
(
SELECT NAME
		, CLASS
		, KOR KOR
		, ENG ENG
		, MAT MAT
		, KOR+ENG+MAT TOT
FROM EXAM_RSLT A )
;


-- 퍼센트 구하기 
SELECT A.*, ROUND(SUM(TOT) OVER(ORDER BY TOT DESC) * 100/ SUM(TOT) OVER()) 
FROM (
SELECT KOR+ENG+MAT TOT
FROM EXAM_RSLT A ) A
;

SELECT A.*, RANK() OVER(PARTITION BY CLASS ORDER BY TOT)  -- 반별로 랭크
  , RANK() OVER(ORDER BY TOT)  -- 전체를 하나의 반으로 
FROM (
SELECT KOR+ENG+MAT TOT, NAME, CLASS
FROM EXAM_RSLT A ) A
;
