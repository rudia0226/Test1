

-- SUBQUERY-1 : POSISION 이 전임강사인 사람을 찾는 서브쿼리

SELECT NAME, POSITION
FROM PROFESSOR
WHERE POSITION = (
								SELECT POSITION
								FROM PROFESSOR
								WHERE NAME = '전은지'	
							);

-- SUBQUERY-2 : 단일행 서브쿼리 						
-- CASE1
SELECT * FROM STUDENT;
SELECT * 
FROM STUDENT
WHERE GRADE = (
					SELECT GRADE
					FROM STUDENT
					WHERE NAME='김신영'
);


-- CASE2  -- 오류 (단일행 하위 질의에 2개 이상의 행이 리턴됨)
SELECT * 
FROM STUDENT
WHERE GRADE = (
					SELECT GRADE 
					FROM STUDENT
					WHERE GRADE ='4'
);

-- IN 연산자
SELECT NAME, GRADE, DEPTNO
FROM STUDENT
WHERE DEPTNO IN (
			SELECT DEPTNO 
			FROM DEPARTMENT
			WHERE COLLEGE = 100
);

-- ANY연산자
SELECT STUDNO, NAME, HEIGHT
FROM STUDENT
WHERE HEIGHT > ANY (
						SELECT HEIGHT 
						FROM STUDENT 
						WHERE GRADE ='4'
);


-- ALL연산자
SELECT STUDNO, NAME, HEIGHT
FROM STUDENT
WHERE HEIGHT > ALL (
					SELECT HEIGHT 
					FROM STUDENT 
					WHERE GRADE ='4'
);

-- MAX로 ALL연산자와 같이나타냄
SELECT STUDNO, NAME, HEIGHT
FROM STUDENT
WHERE HEIGHT > (
					SELECT MAX(HEIGHT)
					FROM STUDENT
					WHERE GRADE='4'
);



-- 다중행 서브쿼리 (ALL연산자 이용)
-- 1,2중에 최소값 (1) 보다 큰 건
SELECT * 
FROM STUDENT
WHERE GRADE > ANY (
							SELECT TO_CHAR(ROWNUM)
							FROM DUAL
							CONNECT BY LEVEL < 3
);

-- 1,2 중에 최대값(2) 보다 큰 건
SELECT *
FROM STUDENT
WHERE GRADE > ALL (
					SELECT TO_CHAR(ROWNUM)
					FROM DUAL
					CONNECT BY LEVEL < 3
);


-- 다중행 서브쿼리 (EXISTS 연산자 이용)
SELECT PROFNO, NAME, SAL, COMM 
FROM PROFESSOR
WHERE EXISTS (
			SELECT POSITION
			FROM PROFESSOR 
			WHERE COMM IS NOT NULL
);

-- 예제
SELECT * FROM STUDENT
WHERE EXISTS (
			SELECT NAME 
			FROM STUDENT
			WHERE DEPTNO2 = '201'
);

SELECT * FROM PROFESSOR;





-- ANSI SQL 

-- INNER JOIN 
SELECT STUDNO
		,	NAME
		,	GRADE
		,	A.DEPTNO
		,	B.DNAME
FROM STUDENT A 
INNER JOIN DEPT B
ON (A.DEPTNO = B.DEPTNO);

SELECT * FROM STUDENT;
SELECT * FROM DEPT;


-- LEFT OUTER JOIN
SELECT STUDNO 
	, NAME
	, GRADE
	, A.DEPTNO
	, B.DNAME
FROM STUDENT A
LEFT OUTER JOIN DEPT B
ON(A.DEPTNO = B.DEPTNO);



-- RIGHT OUTER JOIN
SELECT STUDNO
		, NAME
		, GRADE
		, A.DEPTNO
		, B.DEPTNO B_DEPTNO
		, B.DNAME
FROM STUDENT A 
RIGHT OUTER JOIN DEPT B
ON (A.DEPTNO = B.DEPTNO);



-- FULL OUTER JOIN 
SELECT STUDNO
		, NAME
		, GRADE 
		, A.DEPTNO
		, B.DEPTNO B_DEPTNO
		, B.DNAME 
FROM STUDENT A
FULL OUTER JOIN DEPT B
ON(A.DEPTNO = B.DEPTNO );





























































